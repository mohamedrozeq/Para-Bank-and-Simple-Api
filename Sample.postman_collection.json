{
	"info": {
		"_postman_id": "f9deac72-66fb-4bc1-8c4a-b069b3052b69",
		"name": "Sample",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39138663"
	},
	"item": [
		{
			"name": "Members",
			"item": [
				{
					"name": "Get a Single Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response)\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"multipleOf\": 1,\r",
									"      \"minimum\": 1\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 4,\r",
									"      \"maxLength\": 25,\r",
									"      \"pattern\": \"^[a-zA-Z ]*$\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^([Ff]e)?[Mm]ale$\"\r",
									"    }\r",
									"  },\r",
									"  \"additionalProperties\": false,\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"gender\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"let resBody = {\r",
									"    \"id\": 3,\r",
									"    \"name\": \"Lion\",\r",
									"    \"gender\": \"Male\"\r",
									"}\r",
									"\r",
									"// pm.test('Schema is valid', function () {\r",
									"//     pm.response.to.have.jsonSchema(schema)\r",
									"// });\r",
									"\r",
									"pm.test('Response Body is valid', function () {\r",
									"    pm.expect(pm.response.json()).to.deep.equal(resBody)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5002/api/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Single Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"multipleOf\": 1,\r",
									"      \"minimum\": 1\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"minLength\": 4,\r",
									"      \"maxLength\": 25,\r",
									"      \"pattern\": \"^[a-zA-Z ]*$\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^([Ff]e)?[Mm]ale$\"\r",
									"    }\r",
									"  },\r",
									"  \"additionalProperties\": false,\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"gender\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"let resBody = {\r",
									"    \"id\": 3,\r",
									"    \"name\": \"Lion\",\r",
									"    \"gender\": \"Male\"\r",
									"}\r",
									"\r",
									"// pm.test('Schema is valid', function () {\r",
									"//     pm.response.to.have.jsonSchema(schema)\r",
									"// });\r",
									"\r",
									"pm.test('Response Body is valid', function () {\r",
									"    pm.expect(pm.response.json()).to.deep.equal(resBody)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// console.log(pm.request)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5002/api/authors/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"authors",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 429\", function () {",
									"    pm.expect(pm.response.code).to.equal(429);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'error'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.length.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify response body does not contain sensitive information\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:5002/api/members/40",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"members",
								"40"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Member Via PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 429\", function () {",
									"    pm.expect(pm.response.code).to.equal(429);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error message provides meaningful information for troubleshooting\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Ravina\",\r\n        \"gender\": \"Female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5002/api/members/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"members",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Member Via PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 429\", function () {",
									"    pm.expect(pm.response.code).to.equal(429);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'error'\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is descriptive and provides useful information\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Alee\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5002/api/members/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"members",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Member",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.request)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax for accessing response JSON and added a proper test\r",
									"pm.test(\"Verify response JSON has an id property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var data1 = [true, false];\r",
									"var data2 = [true, 123];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
									"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
									"});\r",
									"var jsonObject = xml2Json(responseBody);\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \r\n        \"name\": \"Ryan\",\r\n        \"gender\":\"Male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5002/api/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Female Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});",
									"pm.test(\"Response status code is 429\", function () {",
									"  pm.expect(pm.response.code).to.equal(429);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error field exists and is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:5002/api/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Female Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});",
									"pm.test(\"Response status code is 429\", function () {",
									"    pm.expect(pm.response.code).to.equal(429);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'error'\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData).to.have.property('error');",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response body is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:5002/api/authors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"authors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Get Delayed Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:5002/api/lag?delay=2000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"api",
								"lag"
							],
							"query": [
								{
									"key": "delay",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}